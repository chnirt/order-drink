{"version":3,"sources":["components/ScrollDialog/index.js","validation/createInvitationSchema.js","pages/invitation/index.js","utils/nanoId.js","utils/capitalizeFirstLetter.js","components/Breadcrumb/index.js","hooks/useCRUDApi.js","dto/invitation.js"],"names":["ScrollDialog","title","children","open","scroll","onClose","onSubmit","submitText","onCancel","cancelText","isSubmitting","rest","resetForm","descriptionElementRef","useRef","useEffect","descriptionElement","current","focus","Dialog","aria-labelledby","aria-describedby","fullWidth","maxWidth","DialogTitle","id","DialogContent","dividers","DialogContentText","ref","tabIndex","DialogActions","Button","onClick","color","disabled","createInvitationSchema","Yup","coupon","required","max","reason","menuId","isPublic","useStyles","makeStyles","theme","breadcrumb","padding","spacing","content","marginTop","backdrop","zIndex","drawer","Invitation","props","classes","t","useTranslation","getColor","useCustomTheme","pathname","useLocation","useCRUDApi","variable","url","params","mine","sortBy","responseDTO","invitationsResponse","data","loadingInvitation","loading","onGet","onPost","onPatch","onDelete","socketEmit","useSocket","useState","action","setAction","setId","columns","field","lookup","highlands","render","rowData","Chip","style","backgroundColor","formatColorStatus","label","setOpen","onOpen","a","handleSubmit","result","console","log","useFormik","initialValues","customAlphabet","nanoid","validationSchema","values","requestDTO","invitationRequest","handleChange","handleBlur","errors","touched","setFieldValue","className","Breadcrumb","basename","path","isLoading","options","filtering","actionsColumnIndex","grouping","fixedColumns","pageSize","pageSizeOptions","actions","icon","tooltip","isFreeAction","event","invitation","editable","localization","pagination","labelDisplayedRows","labelRowsSelect","firstAriaLabel","firstTooltip","previousAriaLabel","previousTooltip","nextAriaLabel","nextTooltip","lastAriaLabel","lastTooltip","toolbar","nRowsSelected","searchTooltip","searchPlaceholder","header","body","emptyDataSourceMessage","filterRow","filterTooltip","placeholder","TextField","variant","margin","name","autoComplete","error","helperText","value","onChange","onBlur","FormControl","InputLabel","Select","labelId","inputProps","MenuItem","FormHelperText","component","FormControlLabel","control","Checkbox","checked","capitalizeFirstLetter","string","charAt","toUpperCase","slice","toLowerCase","BreadCrumbs","formatLast","pathList","split","aria-label","map","element","i","capitalize","length","key","to","textDecoration","cache","skip","config","setData","setLoading","setError","refreshIndex","setRefreshIndex","token","localStorage","getItem","api","axios","create","baseURL","timeout","headers","Authorization","refresh","cancelled","get","transformResponse","JSON","parse","then","r","catch","response","message","finally","fetchDate","Promise","resolve","reject","status","post","transformRequest","defaults","onPut","put","patch","delete","_id","invitationResponse"],"mappings":"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","file":"static/js/5.b6dcfe90.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport Button from '@material-ui/core/Button'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogContentText from '@material-ui/core/DialogContentText'\nimport DialogTitle from '@material-ui/core/DialogTitle'\n\nexport default function ScrollDialog({\n  title = 'Title',\n  children,\n  open = false,\n  scroll = 'paper',\n  onClose,\n  onSubmit,\n  submitText = 'Submit',\n  onCancel,\n  cancelText = 'Cancel',\n  isSubmitting,\n  resetForm,\n  ...rest\n}) {\n  const descriptionElementRef = useRef(null)\n  useEffect(() => {\n    if (open) {\n      const { current: descriptionElement } = descriptionElementRef\n      if (descriptionElement !== null) {\n        descriptionElement.focus()\n      }\n    }\n  }, [open])\n\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      scroll={scroll}\n      aria-labelledby=\"scroll-dialog-title\"\n      aria-describedby=\"scroll-dialog-description\"\n      {...rest}\n      fullWidth={true}\n      maxWidth={'xs'}\n    >\n      <DialogTitle id=\"scroll-dialog-title\">{title}</DialogTitle>\n      <DialogContent dividers={scroll === 'paper'}>\n        <DialogContentText\n          id=\"scroll-dialog-description\"\n          ref={descriptionElementRef}\n          tabIndex={-1}\n        >\n          {children}\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onCancel} color=\"secondary\">\n          {cancelText}\n        </Button>\n        <Button onClick={onSubmit} disabled={isSubmitting} color=\"primary\">\n          {submitText}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n","import * as Yup from 'yup'\n\nexport const createInvitationSchema = Yup.object({\n  coupon: Yup.string()\n    .required('Coupon is required')\n    .max(10, 'Coupon must be at most 10 characters'),\n  reason: Yup.string().required('Reason is required'),\n  menuId: Yup.string().required('Menu is required'),\n  isPublic: Yup.bool()\n})\n","import React, { useState, Fragment } from 'react'\nimport { useLocation } from 'react-router-dom'\nimport { useFormik } from 'formik'\nimport { makeStyles } from '@material-ui/styles'\nimport MaterialTable from 'material-table'\nimport AddOutlinedIcon from '@material-ui/icons/AddOutlined'\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined'\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined'\nimport { useTranslation } from 'react-i18next'\nimport {\n  Chip,\n  TextField,\n  InputLabel,\n  Select,\n  MenuItem,\n  FormHelperText,\n  FormControl,\n  FormControlLabel,\n  Checkbox\n} from '@material-ui/core'\n\n// import AccountsDetail from '../accountsDetail'\nimport Breadcrumb from '../../components/Breadcrumb'\nimport ScrollDialog from '../../components/ScrollDialog'\nimport { useCustomTheme } from '../../context/useCustomTheme'\nimport { createInvitationSchema } from '../../validation/createInvitationSchema'\nimport { nanoId } from '../../utils/nanoId'\nimport { useCRUDApi } from '../../hooks/useCRUDApi'\nimport { invitationsResponse, invitationRequest } from '../../dto/invitation'\nimport { variable } from '../../constants'\nimport { useSocket } from '../../context/useSocket'\n\nconst useStyles = makeStyles((theme) => ({\n  breadcrumb: {\n    padding: theme.spacing(1)\n  },\n  content: {\n    marginTop: theme.spacing(2)\n  },\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: '#fff'\n  }\n}))\n\nconst breadcrumb = 'src.pages.invitation'\n\nexport default function Invitation(props) {\n  const classes = useStyles()\n  const { t } = useTranslation()\n  const { getColor } = useCustomTheme()\n  const { pathname } = useLocation()\n  let {\n    data,\n    loading: loadingInvitation,\n    onGet,\n    onPost,\n    onPatch,\n    onDelete\n  } = useCRUDApi(`${variable.url}/invitations`, false, {\n    params: { mine: true, sortBy: '-createdAt' },\n    responseDTO: invitationsResponse\n  })\n  const { socketEmit } = useSocket()\n\n  const [action, setAction] = useState(null)\n  const [id, setId] = useState(null)\n\n  const columns = [\n    {\n      title: t(`${breadcrumb}.Coupon`),\n      field: 'coupon'\n    },\n    {\n      title: t(`${breadcrumb}.Reason`),\n      field: 'reason'\n    },\n    {\n      title: t(`${breadcrumb}.Menu`),\n      field: 'menuId',\n      lookup: {\n        'phuc-long': 'phuc-long',\n        'go-cafe': 'go-cafe',\n        highlands: 'highlands'\n      },\n      render: (rowData) => {\n        const formatColorStatus = (menuId) => {\n          switch (menuId) {\n            case 'go-cafe':\n              return getColor('brown')\n            case 'highlands':\n              return getColor('red')\n            default:\n              return getColor('green')\n          }\n        }\n        return (\n          <Chip\n            style={{ backgroundColor: formatColorStatus(rowData.menuId) }}\n            color=\"primary\"\n            label={rowData.menuId}\n          />\n        )\n      }\n    },\n    {\n      title: t(`${breadcrumb}.Public`),\n      field: 'isPublic'\n    }\n  ]\n\n  // const [data, setData] = React.useState([\n  //   { id: 1, coupon: 'ZHW2O9', reason: 'Lanh luong', status: 'unpublish' },\n  //   { id: 2, coupon: 'ZHW123', reason: 'Hu roi', status: 'locked' },\n  //   {\n  //     id: 3,\n  //     coupon: '10ZH32',\n  //     reason: 'Chin moi nuoc',\n  //     status: 'published'\n  //   },\n  //   {\n  //     id: 4,\n  //     coupon: 'ZMAW1K',\n  //     reason: 'Chin thich moi',\n  //     status: 'complete'\n  //   }\n  // ])\n\n  const [open, setOpen] = useState(false)\n\n  function onOpen(action) {\n    setAction(action)\n    setOpen(true)\n  }\n\n  function onClose() {\n    setOpen(false)\n    setId(null)\n    resetForm()\n  }\n\n  function handleCreate() {\n    handleSubmit()\n  }\n\n  async function handleUpdate() {\n    handleSubmit()\n  }\n\n  async function handleDelete() {\n    const result = await onDelete(id)\n    socketEmit('onChangeInvitation')\n    if (result) {\n      console.log('delete with socket')\n    }\n    onClose()\n  }\n\n  const {\n    values,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    errors,\n    touched,\n    isSubmitting,\n    resetForm,\n    setFieldValue\n  } = useFormik({\n    initialValues: {\n      coupon: nanoId(),\n      reason: '',\n      menuId: '',\n      isPublic: false\n    },\n    validationSchema: createInvitationSchema,\n    onSubmit: async (values) => {\n      // alert(JSON.stringify(values, null, 2))\n      let result\n      if (id) {\n        result = await onPatch(id, values)\n      } else {\n        result = await onPost(values, {\n          requestDTO: invitationRequest\n        })\n      }\n      socketEmit('onChangeInvitation')\n      if (result) {\n        console.log('add with socket')\n      }\n      onClose()\n    }\n  })\n\n  return (\n    <div>\n      <div className={classes.breadcrumb}>\n        <Breadcrumb basename=\"Dashboard\" path={pathname}>\n          {t(`${breadcrumb}.Invitation`)}\n        </Breadcrumb>\n      </div>\n\n      <div className={classes.content}>\n        <MaterialTable\n          title={t(`${breadcrumb}.InvitationList`)}\n          columns={columns}\n          data={data}\n          isLoading={loadingInvitation}\n          // data={query =>\n          //   new Promise((resolve, reject) => {\n          //     let url = 'https://reqres.in/api/users?'\n          //     url += 'per_page=' + query.pageSize\n          //     url += '&page=' + (query.page + 1)\n          //     fetch(url)\n          //       .then(response => response.json())\n          //       .then(result => {\n          //         resolve({\n          //           data: result.data,\n          //           page: result.page - 1,\n          //           totalCount: result.total,\n          //         })\n          //       })\n          //   })\n          // }\n          options={{\n            filtering: true,\n            actionsColumnIndex: -1,\n            grouping: true,\n            // search: true,\n            // sorting: true,\n            fixedColumns: {\n              // left: 2,\n              // right: 1\n            },\n            pageSize: 5,\n            pageSizeOptions: [5, 10]\n          }}\n          actions={[\n            {\n              // icon: 'add',\n              icon: () => <AddOutlinedIcon />,\n              tooltip: t(`${breadcrumb}.CreateInvitation`),\n              isFreeAction: true,\n              onClick: (event) => {\n                onOpen('create')\n              }\n            },\n            (rowData) => ({\n              // icon: 'edit',\n              icon: () => <EditOutlinedIcon />,\n              tooltip: t(`${breadcrumb}.UpdateInvitation`),\n              onClick: async (event, rowData) => {\n                // alert('You want to update ' + rowData.name)\n                // push(`/order/${rowData.coupon}`)\n\n                // console.log(rowData)\n                const invitation = await onGet(rowData.id)\n                setFieldValue('coupon', invitation.coupon)\n                setFieldValue('reason', invitation.reason)\n                setFieldValue('menuId', invitation.menuId)\n                setFieldValue('isPublic', invitation.isPublic)\n                setId(rowData.id)\n                onOpen('update')\n              }\n            }),\n            (rowData) => ({\n              // icon: 'delete',\n              icon: () => <DeleteOutlinedIcon />,\n              tooltip: t(`${breadcrumb}.DeleteInvitation`),\n              onClick: (event, rowData) => {\n                // alert('You want to delete ' + rowData.name)\n                setId(rowData.id)\n                onOpen('delete')\n                // onOpenDelete(rowData.id)\n              }\n            })\n            // {\n            //   // icon: 'isPublic',\n            //   icon: () => <PublishOutlinedIcon />,\n            //   tooltip: 'Publish Invitation',\n            //   onClick: (event, rowData) =>\n            //     alert('You published ' + rowData.name)\n            // }\n          ]}\n          editable={\n            {\n              // onRowAdd: newData =>\n              //   new Promise(resolve => {\n              //     setTimeout(() => {\n              //       resolve()\n              //       setState(prevState => {\n              //         const data = [...prevState.data]\n              //         data.push(newData)\n              //         return { ...prevState, data }\n              //       })\n              //     }, 600)\n              //   }),\n              // onRowUpdate: (newData, oldData) =>\n              //   new Promise(resolve => {\n              //     setTimeout(() => {\n              //       resolve()\n              //       if (oldData) {\n              //         setState(prevState => {\n              //           const data = [...prevState.data]\n              //           data[data.indexOf(oldData)] = newData\n              //           return { ...prevState, data }\n              //         })\n              //       }\n              //     }, 600)\n              //   })\n              // onRowDelete: oldData =>\n              //   new Promise(resolve => {\n              //     setTimeout(() => {\n              //       resolve()\n              //       setState(prevState => {\n              //         const data = [...prevState.data]\n              //         data.splice(data.indexOf(oldData), 1)\n              //         return { ...prevState, data }\n              //       })\n              //     }, 600)\n              //   })\n            }\n          }\n          localization={{\n            pagination: {\n              labelDisplayedRows: `{from}-{to} ${t(\n                breadcrumb + '.of'\n              )} {count}`,\n              labelRowsSelect: t(`${breadcrumb}.rows`),\n              firstAriaLabel: t(`${breadcrumb}.FirstPage`),\n              firstTooltip: t(`${breadcrumb}.FirstPage`),\n              previousAriaLabel: t(`${breadcrumb}.PreviousPage`),\n              previousTooltip: t(`${breadcrumb}.PreviousPage`),\n              nextAriaLabel: t(`${breadcrumb}.NextPage`),\n              nextTooltip: t(`${breadcrumb}.NextPage`),\n              lastAriaLabel: t(`${breadcrumb}.LastPage`),\n              lastTooltip: t(`${breadcrumb}.LastPage`)\n            },\n            toolbar: {\n              nRowsSelected: '{0} row(s) selected',\n              searchTooltip: t(`${breadcrumb}.Search`),\n              searchPlaceholder: t(`${breadcrumb}.Search`)\n            },\n            header: {\n              actions: t(`${breadcrumb}.Actions`)\n            },\n            body: {\n              emptyDataSourceMessage: t(`${breadcrumb}.NRTD`),\n              filterRow: {\n                filterTooltip: t(`${breadcrumb}.Filter`)\n              }\n            },\n            grouping: {\n              placeholder: t(`${breadcrumb}.DHHTGB`)\n            }\n          }}\n        />\n      </div>\n\n      <ScrollDialog\n        open={open}\n        onClose={onClose}\n        onCancel={onClose}\n        cancelText={t(`${breadcrumb}.Cancel`)}\n        onSubmit={\n          action === 'create'\n            ? handleCreate\n            : action === 'update'\n            ? handleUpdate\n            : handleDelete\n        }\n        submitText={\n          action === 'create'\n            ? t(`${breadcrumb}.Save`)\n            : action === 'update'\n            ? t(`${breadcrumb}.OK`)\n            : t(`${breadcrumb}.OK`)\n        }\n        isSubmitting={isSubmitting}\n        resetForm={resetForm}\n        title={\n          action === 'create'\n            ? t(`${breadcrumb}.NewInvitation`)\n            : action === 'update'\n            ? t(`${breadcrumb}.UpdateInvitation`)\n            : t(`${breadcrumb}.DeleteInvitation`)\n        }\n        maxWidth=\"md\"\n      >\n        {action !== 'delete' ? (\n          <Fragment>\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"coupon\"\n              autoComplete=\"coupon\"\n              id={\n                errors.coupon && touched.coupon\n                  ? 'standard-error-helper-text'\n                  : 'coupon'\n              }\n              label={\n                errors.coupon && touched.coupon\n                  ? 'Error Coupon'\n                  : t(`${breadcrumb}.Coupon`)\n              }\n              error={errors.coupon && touched.coupon ? true : false}\n              helperText={\n                errors.coupon && touched.coupon ? errors.coupon : false\n              }\n              value={values.coupon}\n              onChange={handleChange}\n              onBlur={handleBlur}\n            />\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"reason\"\n              autoComplete=\"reason\"\n              id={\n                errors.reason && touched.reason\n                  ? 'standard-error-helper-text'\n                  : 'reason'\n              }\n              label={\n                errors.reason && touched.reason\n                  ? 'Error Reason'\n                  : t(`${breadcrumb}.Reason`)\n              }\n              error={errors.reason && touched.reason ? true : false}\n              helperText={\n                errors.reason && touched.reason ? errors.reason : false\n              }\n              value={values.reason}\n              onChange={handleChange}\n              onBlur={handleBlur}\n            />\n            <FormControl\n              variant=\"outlined\"\n              margin=\"normal\"\n              fullWidth\n              error={errors.menuId}\n            >\n              <InputLabel id=\"menu-label\">{t(`${breadcrumb}.Menu`)}</InputLabel>\n              <Select\n                labelId=\"menu-label\"\n                id=\"menu\"\n                value={values.menuId}\n                onChange={handleChange}\n                label={t(`${breadcrumb}.Menu`)}\n                inputProps={{\n                  name: 'menuId',\n                  id: 'menu-label'\n                }}\n              >\n                <MenuItem value=\"\">\n                  <em>None</em>\n                </MenuItem>\n                <MenuItem value=\"phuc-long\">Phúc Long</MenuItem>\n                <MenuItem value=\"go-cafe\">Gờ Cafe</MenuItem>\n                <MenuItem value=\"highlands\">Highlands</MenuItem>\n              </Select>\n              {errors.menuId && touched.menuId ? (\n                <FormHelperText>{errors.menuId}</FormHelperText>\n              ) : (\n                false\n              )}\n            </FormControl>\n            <FormControl\n              variant=\"outlined\"\n              margin=\"normal\"\n              fullWidth\n              required\n              error={\n                errors.isPublic && touched.isPublic ? errors.isPublic : false\n              }\n              component=\"fieldset\"\n            >\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    value=\"allowExtraEmails\"\n                    color=\"primary\"\n                    checked={values.isPublic}\n                    onChange={() => {\n                      setFieldValue('isPublic', !values.isPublic)\n                    }}\n                  />\n                }\n                label={t(`${breadcrumb}.Public`)}\n              />\n              {errors.isPublic && touched.isPublic ? (\n                <FormHelperText>{errors.isPublic}</FormHelperText>\n              ) : (\n                false\n              )}\n            </FormControl>\n          </Fragment>\n        ) : (\n          t(`${breadcrumb}.AYSYWTDTI`)\n        )}\n      </ScrollDialog>\n    </div>\n  )\n}\n","import { customAlphabet } from 'nanoid'\n\nexport const nanoId = () => {\n  const nanoid = customAlphabet('1234567890abcdef', 10)\n  return nanoid()\n}\n","export const capitalizeFirstLetter = (string = '') =>\n  string.charAt(0).toUpperCase() + string.slice(1).toLowerCase()\n","import React from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs'\nimport { Link } from 'react-router-dom'\nimport { useTranslation } from 'react-i18next'\n\nimport { capitalizeFirstLetter } from '../../utils/capitalizeFirstLetter'\n\nexport default function BreadCrumbs({\n  basename = '',\n  path = '',\n  formatLast = false\n}) {\n  const { t } = useTranslation()\n\n  const pathList = `${basename}${path}`.split('/')\n\n  return (\n    <Breadcrumbs aria-label=\"breadcrumb\">\n      {pathList.map((element, i) => {\n        const capitalize = capitalizeFirstLetter(element)\n        if (i === pathList.length - 1) {\n          return (\n            <Typography key={i} color=\"textPrimary\">\n              {formatLast\n                ? capitalize\n                : t(`src.components.Breadcrumb.${capitalize}`)}\n            </Typography>\n          )\n        }\n        return (\n          <Link\n            key={i}\n            to={`/${element}`}\n            style={{\n              color: 'inherit',\n              textDecoration: 'none'\n            }}\n          >\n            {t(`src.components.Breadcrumb.${capitalize}`)}\n          </Link>\n        )\n      })}\n    </Breadcrumbs>\n  )\n}\n","import { useState, useEffect } from 'react'\nimport axios from 'axios'\n\nconst cache = {}\n\nexport function useCRUDApi(url, skip, config) {\n  const [data, setData] = useState([])\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState()\n  const [refreshIndex, setRefreshIndex] = useState(0)\n\n  const token = localStorage.getItem('access-token')\n\n  const api = axios.create({\n    baseURL: url,\n    timeout: 5000,\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  })\n\n  const refresh = () => {\n    console.log('REFRESH:')\n    delete cache[url]\n    setRefreshIndex(refreshIndex + 1)\n  }\n\n  useEffect(() => {\n    let cancelled = false\n    if (skip) {\n      setData(null)\n      setLoading(false)\n    } else {\n      const fetchDate = async () => {\n        setLoading(true)\n        if (cache[url]) {\n          const data = cache[url]\n          setData(data)\n          setLoading(false)\n        } else {\n          api\n            .get('/', {\n              ...config,\n              transformResponse: [\n                (data) => config.responseDTO(JSON.parse(data))\n              ]\n            })\n            .then((r) => {\n              if (!cancelled) {\n                // console.log(r.data)\n                // cache[url] = r.data // set response in cache;\n                setData(r.data)\n              }\n            })\n            .catch((error) => {\n              if (error.response) {\n                setError(error.response?.data)\n              } else {\n                setError(error.message)\n              }\n            })\n            .finally(() => setLoading(false))\n        }\n      }\n\n      fetchDate()\n    }\n    return () => {\n      cancelled = true\n    }\n  }, [skip, refreshIndex])\n\n  const onPost = (params, config) => {\n    console.log('POST:')\n    setLoading(true)\n    api\n      .post(url, params, {\n        ...config,\n        transformRequest: [\n          (data, headers) => {\n            // modify data here\n            return config.requestDTO(data)\n          },\n          ...api.defaults.transformRequest\n        ]\n      })\n      .then((r) => {\n        if (r.status === 201) {\n          refresh()\n        }\n      })\n      .catch((error) => {\n        if (error.response) {\n          setError(error.response?.data)\n        } else {\n          setError(error.message)\n        }\n      })\n      .finally(() => setLoading(false))\n  }\n\n  const onGet = (id) => {\n    console.log('GET:')\n    setLoading(true)\n    return new Promise((resolve, reject) => {\n      api\n        .get(`/${id}`)\n        .then((r) => {\n          if (r.status === 200) {\n            resolve(r.data)\n          }\n        })\n        .catch((error) => {\n          reject(error.response?.data)\n        })\n        .finally(() => setLoading(false))\n    })\n  }\n\n  const onPut = (id, params) => {\n    console.log('PUT:')\n    setLoading(true)\n    api\n      .put(`/${id}`, params)\n      .then((r) => {\n        if (r.status === 200) {\n          refresh()\n        }\n      })\n      .catch((error) => {\n        if (error.response) {\n          setError(error.response?.data)\n        } else {\n          setError(error.message)\n        }\n      })\n      .finally(() => setLoading(false))\n  }\n\n  const onPatch = (id, params) => {\n    console.log('PATCH:')\n    setLoading(true)\n    api\n      .patch(`/${id}`, params)\n      .then((r) => {\n        if (r.status === 200) {\n          refresh()\n        }\n      })\n      .catch((error) => {\n        if (error.response) {\n          setError(error.response?.data)\n        } else {\n          setError(error.message)\n        }\n      })\n      .finally(() => setLoading(false))\n  }\n\n  const onDelete = (id) => {\n    console.log('DELETE:')\n    setLoading(true)\n    api\n      .delete(`/${id}`)\n      .then((r) => {\n        if (r.status === 200) {\n          refresh()\n        }\n      })\n      .catch((error) => {\n        if (error.response) {\n          setError(error.response?.data)\n        } else {\n          setError(error.message)\n        }\n      })\n      .finally(() => setLoading(false))\n  }\n\n  return {\n    data,\n    setData,\n    loading,\n    error,\n    refresh,\n    onGet,\n    onPost,\n    onPut,\n    onPatch,\n    onDelete\n  }\n}\n","export const invitationRequest = (data = {}) => {\n  const { id, isPublic, ...rest } = data\n  return { id, isPublic, ...rest }\n}\n\nexport const invitationResponse = (data = {}) => {\n  const { _id, isPublic, ...rest } = data\n  return { id: _id, isPublic, ...rest }\n}\n\nexport const invitationsResponse = (data = {}) => {\n  return data.map((element) => invitationResponse(element))\n}\n"],"sourceRoot":""}