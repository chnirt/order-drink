{"version":3,"sources":["validation/registerSchema.js","pages/login/registerTab/index.js","components/Copyright/index.js"],"names":["registerSchema","Yup","username","required","password","confirmPassword","when","is","val","length","then","oneOf","checked","useStyles","makeStyles","theme","paper","margin","spacing","display","flexDirection","alignItems","form","width","marginTop","submit","breadcrumb","RegisterTab","setOpen","handleChangeTabIndex","classes","darkState","useCustomTheme","t","useTranslation","register","useAuth","useFormik","initialValues","validationSchema","onSubmit","values","a","resetForm","handleChange","handleBlur","handleSubmit","errors","touched","isSubmitting","setFieldValue","className","Avatar","variant","avatar","src","WhiteLogo","Logo","Typography","component","noValidate","Grid","container","TextField","fullWidth","name","autoComplete","id","label","error","helperText","value","onChange","onBlur","type","item","xs","FormControl","formControl","FormControlLabel","control","Checkbox","color","FormHelperText","Button","disabled","Link","onClick","Box","mt","Copyright","align","href","Date","getFullYear"],"mappings":"obAEO,MAAMA,EAAiBC,IAAW,CACvCC,SAAUD,MAAaE,SAAS,wBAChCC,SAAUH,MAAaE,SAAS,wBAChCE,gBAAiBJ,MACdE,SAAS,gCACTG,KAAK,WAAY,CAChBC,GAAIC,MAAQA,GAAOA,EAAIC,OAAS,GAChCC,KAAMT,MAAaU,MACjB,CAACV,IAAQ,aACT,uCAGNW,QAASX,MAAWU,MAAM,EAAC,GAAO,6C,YCWpC,MAAME,EAAYC,YAAWC,IAAK,CAChCC,MAAO,CACLC,OAAQF,EAAMG,QAAQ,EAAG,GACzBC,QAAS,OACTC,cAAe,SACfC,WAAY,UAEdC,KAAM,CACJC,MAAO,OACPC,UAAWT,EAAMG,QAAQ,IAE3BO,OAAQ,CACNR,OAAQF,EAAMG,QAAQ,EAAG,EAAG,OAI1BQ,EAAa,kBAEJ,SAASC,GAAY,QAAEC,EAAF,qBAAWC,IAC7C,MAAMC,EAAUjB,IACRkB,EAAcC,cAAdD,UACAE,EAAMC,cAAND,EAH6D,IAI/DE,EAAaC,cAAbD,SAJ+D,QAgBjEE,YAAU,CACZC,cAAe,CACbpC,SAAU,SACVE,SAAU,IACVC,gBAAiB,IACjBO,SAAS,GAEX2B,iBAAkBvC,EAClBwC,SAAS,WAAD,4BAAE,WAAMC,GAAN,SAAAC,EAAA,6DAGRd,GAAQ,GAHA,SAIaO,EAASM,EAAOvC,SAAUuC,EAAOrC,UAJ9C,gBAONyB,EAAqB,GAErBc,KAEFf,GAAQ,GAXA,2CAAF,mDAAC,KAjBTa,EAPmE,EAOnEA,OACAG,EARmE,EAQnEA,aACAC,EATmE,EASnEA,WACAC,EAVmE,EAUnEA,aACAC,EAXmE,EAWnEA,OACAC,EAZmE,EAYnEA,QACAC,EAbmE,EAanEA,aACAN,EAdmE,EAcnEA,UACAO,EAfmE,EAenEA,cAwBF,OACE,yBAAKC,UAAWrB,EAAQd,OACtB,kBAACoC,EAAA,EAAD,CACEC,QAAQ,SACRF,UAAWrB,EAAQwB,OACnBC,IAAKxB,EAAYyB,IAAYC,MAE/B,kBAACC,EAAA,EAAD,CAAYC,UAAU,KAAKN,QAAQ,MAChCpB,EAAE,GAAD,OAAIP,EAAJ,mBAEJ,0BAAMyB,UAAWrB,EAAQR,KAAMsC,YAAU,EAACpB,SAAUM,GAClD,kBAACe,EAAA,EAAD,CAAMC,WAAS,EAAC5C,QAAS,GACvB,kBAAC6C,EAAA,EAAD,CACEV,QAAQ,WACRpC,OAAO,SACPd,UAAQ,EACR6D,WAAS,EACTC,KAAK,WACLC,aAAa,WACbC,GACEpB,EAAO7C,UAAY8C,EAAQ9C,SACvB,6BACA,WAENkE,MACErB,EAAO7C,UAAY8C,EAAQ9C,SACvB,iBACA+B,EAAE,GAAD,OAAIP,EAAJ,cAEP2C,SAAOtB,EAAO7C,WAAY8C,EAAQ9C,UAClCoE,cACEvB,EAAO7C,WAAY8C,EAAQ9C,WAAW6C,EAAO7C,SAE/CqE,MAAO9B,EAAOvC,SACdsE,SAAU5B,EACV6B,OAAQ5B,IAEV,kBAACkB,EAAA,EAAD,CACEV,QAAQ,WACRpC,OAAO,SACPd,UAAQ,EACR6D,WAAS,EACTC,KAAK,WACLC,aAAa,mBACbQ,KAAK,WACLP,GACEpB,EAAO3C,UAAY4C,EAAQ5C,SACvB,6BACA,WAENgE,MACErB,EAAO3C,UAAY4C,EAAQ5C,SACvB,iBACA6B,EAAE,GAAD,OAAIP,EAAJ,cAEP2C,SAAOtB,EAAO3C,WAAY4C,EAAQ5C,UAClCkE,cACEvB,EAAO3C,WAAY4C,EAAQ5C,WAAW2C,EAAO3C,SAE/CmE,MAAO9B,EAAOrC,SACdoE,SAAU5B,EACV6B,OAAQ5B,IAEV,kBAACkB,EAAA,EAAD,CACEV,QAAQ,WACRpC,OAAO,SACPd,UAAQ,EACR6D,WAAS,EACTC,KAAK,kBACLC,aAAa,mBACbQ,KAAK,WACLP,GACEpB,EAAO1C,iBAAmB2C,EAAQ3C,gBAC9B,6BACA,kBAEN+D,MACErB,EAAO1C,iBAAmB2C,EAAQ3C,gBAC9B,yBACA4B,EAAE,GAAD,OAAIP,EAAJ,qBAEP2C,SACEtB,EAAO1C,kBAAmB2C,EAAQ3C,iBAEpCiE,cACEvB,EAAO1C,kBAAmB2C,EAAQ3C,kBAC9B0C,EAAO1C,gBAGbkE,MAAO9B,EAAOpC,gBACdmE,SAAU5B,EACV6B,OAAQ5B,IAEV,kBAACgB,EAAA,EAAD,CAAMc,MAAI,EAACC,GAAI,IACb,kBAACC,EAAA,EAAD,CACE1E,UAAQ,EACRkE,SAAOtB,EAAOnC,UAAWoC,EAAQpC,UAAUmC,EAAOnC,QAClD+C,UAAU,WACVR,UAAWrB,EAAQgD,aAEnB,kBAACC,EAAA,EAAD,CACEC,QACE,kBAACC,EAAA,EAAD,CACEV,MAAM,mBACNW,MAAM,UACNtE,QAAS6B,EAAO7B,QAChB4D,SAAU,KACRtB,EAAc,WAAYT,EAAO7B,YAIvCwD,MAAOnC,EAAE,GAAD,OAAIP,EAAJ,kBAETqB,EAAOnC,UAAWoC,EAAQpC,UACzB,kBAACuE,EAAA,EAAD,KAAiBpC,EAAOnC,YAOhC,kBAACwE,EAAA,EAAD,CACEV,KAAK,SACLV,WAAS,EACTX,QAAQ,YACR6B,MAAM,UACN/B,UAAWrB,EAAQL,OACnB4D,SAAUpC,GAEThB,EAAE,GAAD,OAAIP,EAAJ,eAEJ,kBAACmC,EAAA,EAAD,CAAMC,WAAS,GACb,kBAACD,EAAA,EAAD,CAAMc,MAAI,EAACC,IAAE,IACb,kBAACf,EAAA,EAAD,CAAMc,MAAI,GACR,kBAACW,EAAA,EAAD,CACEjC,QAAQ,QACRkC,QAAS,KACP1D,EAAqB,GACrBc,MAIDV,EAAE,GAAD,OAAIP,EAAJ,eAIR,kBAAC8D,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACC,EAAA,EAAD,W,iCCrOV,gFAKe,SAASA,IAAa,MAC3BzD,EAAMC,cAAND,EACR,OACE,kBAAC,IAAD,CAAYoB,QAAQ,QAAQ6B,MAAM,gBAAgBS,MAAM,UACrD1D,EAAE,sCAAwC,SAC3C,kBAAC,IAAD,CAAMiD,MAAM,UAAUU,KAAK,6BAA3B,UAEQ,KACP,IAAIC,MAAOC,cACX","file":"static/js/11.e13596cf.chunk.js","sourcesContent":["import * as Yup from 'yup'\n\nexport const registerSchema = Yup.object({\n  username: Yup.string().required('Username is required'),\n  password: Yup.string().required('Password is required'),\n  confirmPassword: Yup.string()\n    .required('Confirm Password is required')\n    .when('password', {\n      is: val => (val && val.length > 0 ? true : false),\n      then: Yup.string().oneOf(\n        [Yup.ref('password')],\n        'Both password need to be the same'\n      )\n    }),\n  checked: Yup.bool().oneOf([true], 'You must agree the terms and conditions')\n})\n","import React from 'react'\nimport {\n  makeStyles,\n  Avatar,\n  Typography,\n  Grid,\n  TextField,\n  FormControl,\n  FormControlLabel,\n  Checkbox,\n  FormHelperText,\n  Button,\n  Link,\n  Box\n} from '@material-ui/core'\nimport { useTranslation } from 'react-i18next'\nimport { useFormik } from 'formik'\n\nimport Logo from '../../../assets/images/logo.png'\nimport WhiteLogo from '../../../assets/images/whitelogo.png'\nimport Copyright from '../../../components/Copyright'\nimport { useCustomTheme } from '../../../context/useCustomTheme'\nimport { registerSchema } from '../../../validation/registerSchema'\nimport { useAuth } from '../../../context/useAuth'\n\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    margin: theme.spacing(8, 4),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1)\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2)\n  }\n}))\n\nconst breadcrumb = 'src.pages.login'\n\nexport default function RegisterTab({ setOpen, handleChangeTabIndex }) {\n  const classes = useStyles()\n  const { darkState } = useCustomTheme()\n  const { t } = useTranslation()\n  let { register } = useAuth()\n\n  const {\n    values,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    errors,\n    touched,\n    isSubmitting,\n    resetForm,\n    setFieldValue\n  } = useFormik({\n    initialValues: {\n      username: 'chnirt',\n      password: '0',\n      confirmPassword: '0',\n      checked: true\n    },\n    validationSchema: registerSchema,\n    onSubmit: async values => {\n      // alert(JSON.stringify(values, null, 2))\n\n      setOpen(true)\n      const result = await register(values.username, values.password)\n\n      if (result) {\n        handleChangeTabIndex(0)\n\n        resetForm()\n      }\n      setOpen(false)\n    }\n  })\n\n  return (\n    <div className={classes.paper}>\n      <Avatar\n        variant=\"square\"\n        className={classes.avatar}\n        src={darkState ? WhiteLogo : Logo}\n      />\n      <Typography component=\"h1\" variant=\"h5\">\n        {t(`${breadcrumb}.RegisterPage`)}\n      </Typography>\n      <form className={classes.form} noValidate onSubmit={handleSubmit}>\n        <Grid container spacing={2}>\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"username\"\n            autoComplete=\"username\"\n            id={\n              errors.username && touched.username\n                ? 'standard-error-helper-text'\n                : 'username'\n            }\n            label={\n              errors.username && touched.username\n                ? 'Error Username'\n                : t(`${breadcrumb}.Username`)\n            }\n            error={errors.username && touched.username ? true : false}\n            helperText={\n              errors.username && touched.username ? errors.username : false\n            }\n            value={values.username}\n            onChange={handleChange}\n            onBlur={handleBlur}\n          />\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"password\"\n            autoComplete=\"current-password\"\n            type=\"password\"\n            id={\n              errors.password && touched.password\n                ? 'standard-error-helper-text'\n                : 'password'\n            }\n            label={\n              errors.password && touched.password\n                ? 'Error Password'\n                : t(`${breadcrumb}.Password`)\n            }\n            error={errors.password && touched.password ? true : false}\n            helperText={\n              errors.password && touched.password ? errors.password : false\n            }\n            value={values.password}\n            onChange={handleChange}\n            onBlur={handleBlur}\n          />\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"confirmPassword\"\n            autoComplete=\"confirm-password\"\n            type=\"password\"\n            id={\n              errors.confirmPassword && touched.confirmPassword\n                ? 'standard-error-helper-text'\n                : 'confirmPassword'\n            }\n            label={\n              errors.confirmPassword && touched.confirmPassword\n                ? 'Error Confirm Password'\n                : t(`${breadcrumb}.ConfirmPassword`)\n            }\n            error={\n              errors.confirmPassword && touched.confirmPassword ? true : false\n            }\n            helperText={\n              errors.confirmPassword && touched.confirmPassword\n                ? errors.confirmPassword\n                : false\n            }\n            value={values.confirmPassword}\n            onChange={handleChange}\n            onBlur={handleBlur}\n          />\n          <Grid item xs={12}>\n            <FormControl\n              required\n              error={errors.checked && touched.checked ? errors.checked : false}\n              component=\"fieldset\"\n              className={classes.formControl}\n            >\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    value=\"allowExtraEmails\"\n                    color=\"primary\"\n                    checked={values.checked}\n                    onChange={() => {\n                      setFieldValue('checked', !values.checked)\n                    }}\n                  />\n                }\n                label={t(`${breadcrumb}.IATTTAC`)}\n              />\n              {errors.checked && touched.checked ? (\n                <FormHelperText>{errors.checked}</FormHelperText>\n              ) : (\n                false\n              )}\n            </FormControl>\n          </Grid>\n        </Grid>\n        <Button\n          type=\"submit\"\n          fullWidth\n          variant=\"contained\"\n          color=\"primary\"\n          className={classes.submit}\n          disabled={isSubmitting}\n        >\n          {t(`${breadcrumb}.Register`)}\n        </Button>\n        <Grid container>\n          <Grid item xs />\n          <Grid item>\n            <Link\n              variant=\"body2\"\n              onClick={() => {\n                handleChangeTabIndex(0)\n                resetForm()\n                // push('/register')\n              }}\n            >\n              {t(`${breadcrumb}.AHACSI`)}\n            </Link>\n          </Grid>\n        </Grid>\n        <Box mt={5}>\n          <Copyright />\n        </Box>\n      </form>\n    </div>\n  )\n}\n","import React from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport Link from '@material-ui/core/Link'\nimport { useTranslation } from 'react-i18next'\n\nexport default function Copyright() {\n  const { t } = useTranslation()\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {t('src.components.Copyright.CopyRight') + ' © '}\n      <Link color=\"inherit\" href=\"https://github.com/chnirt\">\n        Chnirt\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  )\n}\n"],"sourceRoot":""}